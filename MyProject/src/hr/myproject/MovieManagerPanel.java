/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.myproject;

import hr.myproject.dal.RepositoryFactory;
import hr.myutilities.utils.IconUtils;
import hr.myproject.dal.RepositoryMovie;
import hr.myproject.model.Movie;
import hr.myproject.model.MovieTable;
import hr.myproject.model.Person;
import hr.myutilities.utils.FileUtils;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author mgali
 */
public class MovieManagerPanel extends javax.swing.JPanel {

    RepositoryMovie repositoryMovie;
    MovieTable movieTable;
    private DefaultListModel<Person> actorsModel;

    private Set<Person> actorsAdd;
    private Set<Person> actorsRemove;

    private Movie selectedMovie;
    private Person selectedPerson;

    /**
     * Creates new form MovieManagerPanel
     */
    public MovieManagerPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblMovies = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        tfPubDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfGenre = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tfDirector = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        lblPicture = new javax.swing.JLabel();
        tfPicturePath = new javax.swing.JTextField();
        btnChoosePicture = new javax.swing.JButton();
        btnDeleteActor = new javax.swing.JButton();
        btnAddMovie = new javax.swing.JButton();
        btnDeleteMovie = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tblMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMoviesMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblMoviesMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblMovies);

        jLabel1.setText("Title");

        jLabel2.setText("Original title");

        jLabel3.setText("Description");

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        jLabel4.setText("Published date");

        jLabel5.setText("Duration");

        jLabel6.setText("Genre");

        jLabel7.setText("Director");

        jLabel8.setText("Actors");

        jScrollPane3.setViewportView(lsActors);

        btnChoosePicture.setBackground(java.awt.Color.orange);
        btnChoosePicture.setText("Choose");
        btnChoosePicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChoosePictureActionPerformed(evt);
            }
        });

        btnDeleteActor.setBackground(java.awt.Color.red);
        btnDeleteActor.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        btnDeleteActor.setText("X");
        btnDeleteActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActorActionPerformed(evt);
            }
        });

        btnAddMovie.setBackground(java.awt.Color.green);
        btnAddMovie.setText("Add");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        btnDeleteMovie.setBackground(java.awt.Color.red);
        btnDeleteMovie.setText("Delete");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tfDirector, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(tfPubDate, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfTitle, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfOriginalTitle, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane2)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6)
                                        .addComponent(tfGenre)
                                        .addComponent(tfDuration)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDeleteActor)
                                        .addGap(7, 7, 7))))))
                    .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfPicturePath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnChoosePicture, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnDeleteActor, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeleteMovie)
                            .addComponent(btnAddMovie))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChoosePicture))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void tblMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMoviesMouseClicked
        initMovieSelect();
    }//GEN-LAST:event_tblMoviesMouseClicked

    private void tblMoviesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMoviesMouseReleased
        initMovieSelect();
    }//GEN-LAST:event_tblMoviesMouseReleased

    private void btnDeleteActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActorActionPerformed
        selectedPerson = lsActors.getSelectedValue();
        actorsRemove.add(selectedPerson);
        actorsModel.removeElement(selectedPerson);
        selectedPerson = null;
    }//GEN-LAST:event_btnDeleteActorActionPerformed

    private void btnChoosePictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChoosePictureActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPicturePath.setText(file.getAbsolutePath());
        setPicture(lblPicture, file);
    }//GEN-LAST:event_btnChoosePictureActionPerformed

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed
        try {
            if (selectedMovie.getPicturePath() != null) {
                Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
            }
            repositoryMovie.deletePerson(selectedMovie.getDirector().getId());
            repositoryMovie.deleteMovie(selectedMovie.getId());
            movieTable.setMovies(repositoryMovie.selectMovies());
            clearForm();
            clearActorSets();
        } catch (Exception ex) {
            Logger.getLogger(MovieManagerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed
        try {
            Movie movie = new Movie(
                    tfTitle.getText().trim(),
                    LocalDateTime.parse(tfPubDate.getText().trim(), Movie.DATE_FORMATTER),
                    taDescription.getText().trim(),
                    tfOriginalTitle.getText().trim(),
                    getPerson(tfDirector.getText().trim()),
                    null,
                    tfDuration.getText().trim(),
                    tfGenre.getText().trim(),
                    tfPicturePath.getText()
            );
            movie.getDirector().setId(repositoryMovie.createPerson(movie.getDirector()));
            movie.setId(repositoryMovie.createMovie(movie));
            for (Person actor : actorsAdd) {
                actor.setId(repositoryMovie.createMovieActor(actor,movie));
                repositoryMovie.createMovieActor(actor, movie);
            }

            movieTable.setMovies(repositoryMovie.selectMovies());
            clearForm();
            clearActorSets();
        } catch (Exception ex) {
            Logger.getLogger(MovieManagerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddMovieActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnChoosePicture;
    private javax.swing.JButton btnDeleteActor;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tblMovies;
    private javax.swing.JTextField tfDirector;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfGenre;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPubDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            initActorsModel();
            initTable();
            initSets();
        } catch (Exception ex) {
            Logger.getLogger(MovieManagerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initMovieSelect() {
        clearActorSets();
        showMovie();
    }

    private void initRepository() throws Exception {
        repositoryMovie = RepositoryFactory.GetMovieRepository();
    }

    private void initTable() throws Exception {
        tblMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblMovies.setAutoCreateRowSorter(true);
        tblMovies.setRowHeight(20);
        movieTable = new MovieTable(repositoryMovie.selectMovies());
        tblMovies.setModel(movieTable);
    }

    private void clearActorSets() {
        actorsAdd.clear();
        actorsRemove.clear();
    }

    private void showMovie() {
        int selectedRow = tblMovies.getSelectedRow();
        int realRowIndex = tblMovies.convertRowIndexToModel(selectedRow);

        int id = (int) movieTable.getValueAt(realRowIndex, 0);

        try {
            Optional<Movie> optMovie = repositoryMovie.selectMovie(id);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(PersonManegerPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillForm(Movie movie) throws IOException {
        tfTitle.setText(movie.getTitle());
        tfOriginalTitle.setText(movie.getOriginalTitle());
        taDescription.setText(movie.getDescription());
        tfPubDate.setText(movie.getPublishedDate().format(Movie.DATE_FORMATTER));
        tfDirector.setText(movie.getDirector().toString());
        tfGenre.setText(movie.getGenre());
        tfDuration.setText(movie.getDuration());

        if (movie.getPicturePath() != null && Files.exists(Paths.get(movie.getPicturePath()))) {
            tfPicturePath.setText(movie.getPicturePath());
            lblPicture.setIcon(IconUtils.createIcon(new File(movie.getPicturePath()), lblPicture.getWidth(), lblPicture.getHeight()));
        }
        loadActors(movie);
    }

    private void loadActors(Movie movie) {
        actorsModel.clear();
        if (!movie.getActors().isEmpty()) {
            movie.getActors().forEach(actorsModel::addElement);
        }
        lsActors.setModel(actorsModel);
    }

    private void initSets() {
        actorsAdd = new TreeSet<>();
        actorsRemove = new TreeSet<>();
    }

    private void initActorsModel() {
        actorsModel = new DefaultListModel<>();
        lsActors.setModel(actorsModel);
    }

    private void setPicture(JLabel lblPicture, File file) {
        try {
            lblPicture.setIcon(IconUtils.createIcon(file, lblPicture.getWidth(), lblPicture.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(MovieManagerPanel.class.getName()).log(Level.SEVERE, null, ex);
            lblPicture.setIcon(null);
        }
    }

    private void clearForm() {
        actorsModel.clear();
        lsActors.setModel(actorsModel);

        tfTitle.setText("");
        tfOriginalTitle.setText("");
        taDescription.setText("");
        tfPubDate.setText("");
        tfDirector.setText("");
        tfGenre.setText("");
        tfDuration.setText("");

        tfPicturePath.setText("");
        lblPicture.setIcon(null);

        selectedPerson = null;
    }
    
    private static Person getPerson(String data) {
        String[] personName = data.trim().split(" ", 2); //Spliting string in 2 parts
        switch (personName.length) {
            case 1: //Only first name and last name empty string
                return new Person(personName[0], "");
            case 2: //First name and last name
                return new Person(personName[0], personName[1]);
        }
        return null;
    }

    private String uploadPicture() throws IOException {
       
            String pictureUrl = tfPicturePath.getText().trim();
            String ext = pictureUrl.substring(pictureUrl.lastIndexOf("."));
            
            String pictureName = UUID.randomUUID() + ext;
            String picturePath = "assets" + File.separator + pictureName;
            
            FileUtils.copyFromUrl(pictureUrl, picturePath);
            
            return picturePath;
        

    }
}
