/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.myproject;

import hr.algebra.handlers.PersonTransferable;
import hr.myproject.dal.RepositoryFactory;
import hr.myproject.dal.RepositoryMovie;
import hr.myproject.model.Person;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;

/**
 *
 * @author mgali
 */
public class PersonManegerPanel extends javax.swing.JPanel {

    RepositoryMovie repositoryMovie;

    private DefaultListModel<Person> personModel;

    private DefaultListModel<Person> favoritePersonModel;

    /**
     * Creates new form PersonManegerPanel
     */
    public PersonManegerPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsFavourites = new javax.swing.JList<>();
        btnDeleteFavourite = new javax.swing.JButton();
        btnEditActor = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Actors");

        jScrollPane1.setViewportView(lsActors);

        jLabel2.setText("Favourites");

        jScrollPane2.setViewportView(lsFavourites);

        btnDeleteFavourite.setBackground(java.awt.Color.red);
        btnDeleteFavourite.setText("Delete");

        btnEditActor.setBackground(java.awt.Color.blue);
        btnEditActor.setText("Edit");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(259, 259, 259)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(51, 51, 51)
                        .addComponent(btnEditActor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(35, 35, 35)
                        .addComponent(btnDeleteFavourite, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)))
                .addGap(237, 237, 237))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEditActor)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDeleteFavourite)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(84, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteFavourite;
    private javax.swing.JButton btnEditActor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Person> lsFavourites;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            initModels();
            loadListModels();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(PersonManegerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initRepository() throws Exception {
        repositoryMovie = RepositoryFactory.GetMovieRepository();
    }

    private void initModels() {
        personModel = new DefaultListModel<>();
        favoritePersonModel = new DefaultListModel<>();
    }

    private void loadListModels() throws Exception {
        loadListModel(repositoryMovie.selectPersons().stream().sorted().collect(Collectors.toList()), personModel, lsActors);
        loadListModel(repositoryMovie.selectFavoritePersons().stream().sorted().collect(Collectors.toList()), favoritePersonModel, lsFavourites);

    }

    private void loadListModel(List<Person> personList, DefaultListModel<Person> personModel, JList<Person> lsPerson) {
        personModel.clear();
        personList.forEach(personModel::addElement);
        lsPerson.setModel(personModel);
    }

    private void initDragNDrop() {
        lsActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsActors.setDragEnabled(true);
        lsActors.setTransferHandler(new ExportActorHandler());

        lsFavourites.setDropMode(DropMode.ON);
        lsFavourites.setTransferHandler(new ImportPersonHandler());
    }

    private class ExportActorHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsActors.getSelectedValue());
        }
    }

    public class ImportPersonHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person add = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                if (!favoritePersonModel.contains(add)) {
                    repositoryMovie.addFavoritePerson(add.getId());
                    loadListModels();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(PersonManegerPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(PersonManegerPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

    }
}
