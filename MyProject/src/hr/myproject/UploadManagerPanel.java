package hr.myproject;

import hr.myproject.dal.RepositoryFactory;
import hr.myproject.dal.RepositoryMovie;
import hr.myproject.model.Movie;
import hr.myproject.model.Person;
import hr.myproject.parsers.rss.MovieParser;
import hr.myutilities.utils.FileUtils;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.xml.stream.XMLStreamException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author mgali
 */
public class UploadManagerPanel extends javax.swing.JPanel {

    RepositoryMovie repositoryMovie;
    private DefaultListModel<Movie> movies;

    /**
     * Creates new form UploadManagerPanel
     */
    public UploadManagerPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUpload = new javax.swing.JButton();
        btnDeleteAll = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();

        btnUpload.setBackground(java.awt.Color.green);
        btnUpload.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        btnUpload.setText("UPLOAD");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnDeleteAll.setBackground(java.awt.Color.red);
        btnDeleteAll.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        btnDeleteAll.setText("DELETE ALL");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lsMovies);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        try {
            List<Movie> movies = MovieParser.parse();
            addToSql(movies);
            loadModel();
        } catch (IOException | XMLStreamException | ParseException ex) {
            Logger.getLogger(UploadManagerPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(UploadManagerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed
        try {
            deleteSqlData();
        } catch (Exception ex) {
            Logger.getLogger(UploadManagerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnUpload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Movie> lsMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            repositoryMovie = RepositoryFactory.GetMovieRepository();
            movies = new DefaultListModel<>();

            loadModel();

        } catch (Exception ex) {
            Logger.getLogger(UploadManagerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadModel() throws Exception {
        List<Movie> listMovies = repositoryMovie.selectMovies();
        movies.clear();
        listMovies.forEach(movies::addElement);
        lsMovies.setModel(movies);
    }

    private void addToSql(List<Movie> movies) throws Exception {
        int id;
        for (Movie movie : movies) {

            id = repositoryMovie.createPerson(movie.getDirector());
            movie.getDirector().setId(id);

            if (movie.getActors() != null) {
                for (Person actor : movie.getActors()) {
                    id = repositoryMovie.createPerson(actor);
                    actor.setId(id);
                }
            }
            
            id = repositoryMovie.createMovie(movie);
            movie.setId(id);
            
            for (Person actor : movie.getActors()) {
                repositoryMovie.createMovieActor(actor, movie);
            }
        }
    }

    private void deleteSqlData() throws Exception {
        repositoryMovie.deleteMovies(); 
        FileUtils.emptyDirectory(new File("assets"));
        loadModel();
    }
}
